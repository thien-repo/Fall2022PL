[Tail Recursion] Given a positive number greater than 0 (assume the number is a positive integer greater than 0, no need to do error checking), create a function that returns a series of factorials for values 1, 2, ..., up to n. For example, given 3, the result is 1, 2, 6. Given 5, the result is 1, 2, 6, 24, 120.

Use one of the languages you used for assignment 1, implement the function for a given n, using tail call recursion (not iteration), that is the call to the function should be at the last or tail position in the recursion. The language that you use does not have to provide tail call optimization, but express the code as a tail recursion. Also, avoid mutating any state/variables to achieve this solution.

Save the code into a file with the proper extension. Provide a simple build file that will compile (if necessary) and run the code for sample values of n 1, 4, 7, and 10. Do not include any unit tests.

Total [10]: -1
We can avoid nested function by using default argument.
