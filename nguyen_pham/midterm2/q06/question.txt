What's the difference between method overloading and polymorphism? Given an example to show the difference. Mention the language used, but the code can be right here in this file.

Method overloading is a form of polymorphism in the case that a method with the same name can bahave differently given different parameter types. 

Polymorphism is when you have multiple methods with the same name and parameters but different implementation. Polymorphism is the ability for an object to vary behavior based on its type.

Language used: Java

Example of method overloading:

class MethodOverloadingEx {
    static int add(int a, int b) { 
      return a + b; 
    }
  
    static int add(int a, int b, int c) {
        return a + b + c;
    }
  
    public static void main(String args[]) {
        System.out.println("add() with 2 parameters");
        System.out.println(add(4, 6));
        
        System.out.println("add() with 3 parameters");
        System.out.println(add(4, 6, 7));
    }
}

OUTPUT: 

add() with 2 parameters
10
add() with 3 parameters
17


Example of run time polymorphism:

class Animal {
    void eat() {
        System.out.println("eat() method of base class");
        System.out.println("eating.");
    }
}
  
class Dog extends Animal {
    void eat() {
        System.out.println("eat() method of derived class");
        System.out.println("Dog is eating.");
    }
}
  
class Polymorphism {
    public static void main(String args[]) {
        Dog d1 = new Dog();
        Animal a1 = new Animal();
  
        d1.eat();
        a1.eat();
  
        Animal animal = new Dog();
        // eat() method of animal class is overridden by
        // base class eat()
        animal.eat();
    }
}

OUTPUT:

eat() method of derived class
Dog is eating.
eat() method of base class
eating.
eat() method of derived class
Dog is eating.

Total[10]: -3
Need to mention both scope and signature differences.
